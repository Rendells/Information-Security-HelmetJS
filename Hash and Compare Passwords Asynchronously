As a reminder, this project is being built upon the following starter project on Gitpod, or cloned from GitHub.

As hashing is designed to be computationally intensive, it is recommended to do so asynchronously on your server as to avoid blocking incoming connections while you hash. All you have to do to hash a password asynchronous is call

bcrypt.hash(myPlaintextPassword, saltRounds, (err, hash) => {
  /*Store hash in your db*/
});
Add this hashing function to your server (we've already defined the variables used in the function for you to use) and log it to the console for you to see! At this point you would normally save the hash to your database.

Now when you need to figure out if a new input is the same data as the hash you would just use the compare function.

bcrypt.compare(myPlaintextPassword, hash, (err, res) => {
  /*res == true or false*/
});
Add this into your existing hash function (since you need to wait for the hash to complete before calling the compare function) after you log the completed hash and log 'res' to the console within the compare. 
You should see in the console a hash, and then 'true' is printed! If you change 'myPlaintextPassword' in the compare function to 'someOtherPlaintextPassword', then it should say false.

bcrypt.hash('passw0rd!', 13, (err, hash) => {
  console.log(hash);
  //$2a$12$Y.PHPE15wR25qrrtgGkiYe2sXo98cjuMCG1YwSI5rJW1DSJp0gEYS
  bcrypt.compare('passw0rd!', hash, (err, res) => {
    console.log(res); //true
  });
});

Submit your page when you think you've got it right.

// This is in VScode for a JS bcrypt_demo.js

let bcrypt = require('bcrypt')

let input = 'dog'
let saltRounds = 8

// let salt = bcrypt.genSaltSync(8)
//console.log('\nSalt : ' + salt)

bcrypt.hash(input, saltRounds, (error, hash) = > {
 consle.log ('n' + hash + '\n')

bcrypt.compare(input, hash, (error, result) => {
 console.log('result is ' + result + '\n')
})

})

'use strict';
const express     = require('express');
const bodyParser  = require('body-parser');
const fccTesting  = require('./freeCodeCamp/fcctesting.js');
const app         = express();
let bcrypt = require('bcrypt')

fccTesting(app);
const saltRounds = 12;
const myPlaintextPassword = 'sUperpassw0rd!';
const someOtherPlaintextPassword = 'pass123';


//START_ASYNC -do not remove notes, place code between correct pair of notes.

bcrypt.hash(myPlaintextPassword, saltRounds, (err, hash) => {
            console.log(hash)
            
  bcrypt.compare(myPlaintextPassword, hash, (err, res) => {
    console.log(res)
  })
})

//END_ASYNC

//START_SYNC


